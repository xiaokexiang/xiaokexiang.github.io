<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Condition  on Keep Improving</title>
    <link>https://blog.leejay.top/tags/condition/</link>
    <description>Recent content in Condition  on Keep Improving</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>苏ICP备18050258号-1</copyright>
    <lastBuildDate>Thu, 18 Jun 2020 20:01:58 +0800</lastBuildDate>
    <atom:link href="https://blog.leejay.top/tags/condition/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Condition源码解析</title>
      <link>https://blog.leejay.top/post/concurrent_condition/</link>
      <pubDate>Thu, 18 Jun 2020 20:01:58 +0800</pubDate>
      <guid>https://blog.leejay.top/post/concurrent_condition/</guid>
      <description>Condition是一个接口，其实现在Lock内，需要配合Lock锁使用。其内部构建了一个单向队列，操作时不需要使用CAS来保证同步。&#xA;final ConditionObject newCondition() { return new ConditionObject(); } public class ConditionObject implements Condition { /** First node of condition queue. */ private transient Node firstWaiter; /** Last node of condition queue. */ private transient Node lastWaiter; public ConditionObject() { } } await // 执行await时肯定已经获取了锁，所以不需要CAS操作 public final void await() throws InterruptedException { // 如果当前线程已中断就抛出中断异常 if (Thread.interrupted()) throw new InterruptedException(); // 将当前线程添加到等待队列 Node node = addConditionWaiter(); // 线程阻塞之前必须要先释放锁，否则会死锁，这里是全部释放，包括重入锁 int savedState = fullyRelease(node); int interruptMode = 0; // 判断node是否在AQS同步队列里面，初始是在条件队列里面 while (!</description>
    </item>
  </channel>
</rss>
