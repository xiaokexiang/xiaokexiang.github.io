<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ReentrantReadWriteLock  on Keep Improving</title>
    <link>https://blog.leejay.top/tags/reentrantreadwritelock/</link>
    <description>Recent content in ReentrantReadWriteLock  on Keep Improving</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>苏ICP备18050258号-1</copyright>
    <lastBuildDate>Wed, 24 Jun 2020 09:15:29 +0800</lastBuildDate>
    <atom:link href="https://blog.leejay.top/tags/reentrantreadwritelock/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ReadWriteLock源码解析</title>
      <link>https://blog.leejay.top/post/concurrent_read_write_lock/</link>
      <pubDate>Wed, 24 Jun 2020 09:15:29 +0800</pubDate>
      <guid>https://blog.leejay.top/post/concurrent_read_write_lock/</guid>
      <description>ReadWriteLock ReadWriteLock是接口，它定义了两个方法：ReadLock和WriteLock，读写锁的具体实现在ReentrantReadWriteLock中。读写锁是之前分析的独占锁和共享锁两个特性的集合体，具有如下规定：&#xA;允许多个线程同时读取变量。 某时刻只允许一个线程写变量。 如果有写线程正在执行写操作，那么禁止其他读线程读取变量。 ReadWriteLock的默认实现类ReentrantReadWriteLock&#xA;public class ReentrantReadWriteLock implements ReadWriteLock { // 读锁和写锁都是ReentrantReadWriteLock的内部类 private final ReentrantReadWriteLock.ReadLock readerLock; private final ReentrantReadWriteLock.WriteLock writerLock; final Sync sync; // 读写锁默认是非公平锁 public ReentrantReadWriteLock() { this(false); } // ReadLock和WriteLock都是继承了同一个抽象类Lock，所以他们属于同一个AQS队列 public ReentrantReadWriteLock(boolean fair) { sync = fair ? new FairSync() : new NonfairSync(); readerLock = new ReadLock(this); writerLock = new WriteLock(this); } } 相比于Semaphore，ReentrantReadWriteLock采用共享和独占结合的方法。Semaphore就像是一个令牌桶，谁都可以拿取令牌执行任务，谁都可以归还令牌。它不会记录是哪个线程获取了锁，而ReentrantReadWriteLock会记录，只有持有相关锁才能来释放锁。&#xA;state 与独占锁、共享锁的state的使用不同，因为需要表示两种状态，所以对int型state做了高低位切割，分别表示不同的状态。已知int=4byte= 32bit，所以高16位表示读，低16位表示写。他们的取值范围在[0 ~ 2^16 - 1]，进而我们可以得出，最多有2^16 -1个线程可以获取读锁。&#xA;abstract static class Sync extends AbstractQueuedSynchronizer { static final int SHARED_SHIFT = 16; static final int SHARED_UNIT = (1 &amp;lt;&amp;lt; SHARED_SHIFT); // 读锁和写锁的count不能超过MAX_COUNT static final int MAX_COUNT = (1 &amp;lt;&amp;lt; SHARED_SHIFT) - 1; static final int EXCLUSIVE_MASK = (1 &amp;lt;&amp;lt; SHARED_SHIFT) - 1; // 返回读锁的count static int sharedCount(int c) { return c &amp;gt;&amp;gt;&amp;gt; SHARED_SHIFT; } // 返回写锁的count static int exclusiveCount(int c) { return c &amp;amp; EXCLUSIVE_MASK; } } 读锁和写锁的count不能超过MAX_COUNT即2^16-1。</description>
    </item>
  </channel>
</rss>
