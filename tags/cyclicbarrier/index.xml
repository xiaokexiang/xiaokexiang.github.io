<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CyclicBarrier  on Keep Improving</title>
    <link>https://leejay.top/tags/cyclicbarrier/</link>
    <description>Recent content in CyclicBarrier  on Keep Improving</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>苏ICP备18050258号</copyright>
    <lastBuildDate>Mon, 29 Jun 2020 13:27:36 +0800</lastBuildDate><atom:link href="https://leejay.top/tags/cyclicbarrier/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CyclieBarrier源码解析</title>
      <link>https://leejay.top/post/cycliebarrier/</link>
      <pubDate>Mon, 29 Jun 2020 13:27:36 +0800</pubDate>
      
      <guid>https://leejay.top/post/cycliebarrier/</guid>
      <description>CyclicBarrier 基于CountDownLatch的特性：计数器为0时，即使调用await，该线程也不会等待其他线程执行完毕而被阻塞。
CyclicBarrier的出现是为了解决复杂场景CountDownLatch使用的劣势。
 CountDownLatch中存在两种类型的线程：分别是调用await方法和调用countDown方法的线程。
而CyclicBarrier中只存在一种线程：调用await的线程扮演了上述两种角色，即先countDown后await。
 CyclicBarrier拆分成两部分来理解：
 Cyclic（回环）：当所有等待线程执行完毕后，会重置状态，使其能够重用。 Barrier（屏障）：线程调用await方法就会阻塞，这个阻塞点就是屏障点，等到所有线程调用await方法后，线程就会穿过屏障继续往下执行。   相比CountDownLatch只使用一次，CyclicBarrier更强调循环使用。
 @Slf4j public class CyclicBarrierTest {   // 传入每次屏障之前需要等待的线程数量  private static final CyclicBarrier BARRIER = new CyclicBarrier(2, () -&amp;gt; {  // 不能保证每代执行该语句的都是同一个线程  log.info(&amp;#34;doSomenthing before the last thread signal other threads&amp;#34;)  });  private static final ExecutorService EXECUTOR = Executors.newFixedThreadPool(2);   public static void main(String[] args) {  EXECUTOR.execute(() -&amp;gt; {  try {  //CyclicBarrier 保证await  log.</description>
    </item>
    
  </channel>
</rss>
