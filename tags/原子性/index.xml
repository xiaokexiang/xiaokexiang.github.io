<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>原子性 on Keep Improving</title>
    <link>https://leejay.top/tags/%E5%8E%9F%E5%AD%90%E6%80%A7/</link>
    <description>Recent content in 原子性 on Keep Improving</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>苏ICP备18050258号</copyright>
    <lastBuildDate>Fri, 12 Jun 2020 22:49:05 +0800</lastBuildDate><atom:link href="https://leejay.top/tags/%E5%8E%9F%E5%AD%90%E6%80%A7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CAS乐观锁浅析</title>
      <link>https://leejay.top/post/cas/</link>
      <pubDate>Fri, 12 Jun 2020 22:49:05 +0800</pubDate>
      
      <guid>https://leejay.top/post/cas/</guid>
      <description>判断数据是否被修改，同时写回新值，这两个操作要合成一个原子操作，这就是CAS(compare and swap)。
之前多线程环境下，我们对变量进行计算都是对其加锁来实现，但是现在我们可以用过Atomic相关的类来实现相同的效果且性能更好。而AtomicInteger就是其中的一员，其底层就是通过CAS来实现的。
// 伪代码 class AtomicInteger { 	// 保证内存可见性 	private volatile int value; 		public final int getAndIncrement() { 	for(;;) {  int current = get();  int next = current + 1;  // cas替换  if (compareAndSwap(current, next)) {  return current;  } 	} 	} 		public int get() { 	return value; 	} }  乐观锁：读操作不上锁，等到写操作的时候，判断数据在此期间是否被修改，如果已被修改，则重复该流程，直到把值写回去。CAS就是乐观锁的体现。</description>
    </item>
    
  </channel>
</rss>
