<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BlockingQueue  on Keep Improving</title>
    <link>https://blog.leejay.top/tags/blockingqueue/</link>
    <description>Recent content in BlockingQueue  on Keep Improving</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>苏ICP备18050258号-1</copyright>
    <lastBuildDate>Sat, 04 Jul 2020 20:38:54 +0800</lastBuildDate>
    <atom:link href="https://blog.leejay.top/tags/blockingqueue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BlockingQueue单向阻塞队列源码解析</title>
      <link>https://blog.leejay.top/post/concurrent_blocking_queue/</link>
      <pubDate>Sat, 04 Jul 2020 20:38:54 +0800</pubDate>
      <guid>https://blog.leejay.top/post/concurrent_blocking_queue/</guid>
      <description>BlockingQueue 概念 BlockingQueue带阻塞功能的线程安全队列，但队列已满时会阻塞添加者，当队列为空时会阻塞获取者。它本身是一个接口，具体的功能由它的实现类来完成。&#xA;接口方法 public interface BlockingQueue&amp;lt;E&amp;gt; extends Queue&amp;lt;E&amp;gt; { // 添加元素到队列中返回boolean，队列满抛出异常 boolean add(E e); // 添加元素到队列中，无返回值，抛出中断异常，队列满就阻塞 void put(E e) throws InterruptedException; // 添加元素返回boolea 队列满就返回false，非阻塞 boolean offer(E e); // 添加元素返回boolean，等待指定时间直到队列有空间可插入 boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException; // 从队首获取元素并删除，阻塞，支持等待时中断异常 E take() throws InterruptedException; // 获取队首元素并删除，若无元素等待执行时长，时间到还没有就返回null E poll(long timeout, TimeUnit unit) throws InterruptedException; // 返回理想状态下队列不阻塞可加入的元素数量，如果队列没有最大限制就返回 // Integer.max_value int remainingCapacity(); // 移除指定元素（1个或多个）若它存在(equals比较) // 若元素存在（或队列改变）返回true boolean remove(Object o); // 判断队列是否至少包含一个某元素 public boolean contains(Object o); // 移除队列中全部可用元素，添加到指定集合中，若元素添加失败可能导致元素不在 // 移除前和添加后的集合中 int drainTo(Collection&amp;lt;?</description>
    </item>
  </channel>
</rss>
