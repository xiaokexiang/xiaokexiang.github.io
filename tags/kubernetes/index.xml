<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes  on Keep Improving</title>
    <link>https://leejay.top/tags/kubernetes/</link>
    <description>Recent content in kubernetes  on Keep Improving</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>苏ICP备18050258号-1</copyright>
    <lastBuildDate>Mon, 21 Mar 2022 15:03:59 +0800</lastBuildDate><atom:link href="https://leejay.top/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kube Eventer基于mysql的使用</title>
      <link>https://leejay.top/post/kube-eventer%E5%9F%BA%E4%BA%8Emysql%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 21 Mar 2022 15:03:59 +0800</pubDate>
      
      <guid>https://leejay.top/post/kube-eventer%E5%9F%BA%E4%BA%8Emysql%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>前言 工作上需要持久化Pod的事件信息，我们知道事件默认是由etcd来进行存储的，但是事件的信息存储具有时效性（默认1h，通过修改kube-apiserver的--event--ttl实现更长时间的存储），且将etcd这种内存级别的组件作为持久化数据库也是不合理的，所以使用了阿里开源的这款事件告警组件kube-eventer。
使用方法 创建表 CREATE TABLE IF NOT EXISTS `kube_event` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;event primary key&amp;#39;, `name` varchar(64) NOT NULL DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;event name&amp;#39;, `namespace` varchar(64) NOT NULL DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;event namespace&amp;#39;, `event_id` varchar(64) NOT NULL DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;event_id&amp;#39;, `type` varchar(64) NOT NULL DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;event type Warning or Normal&amp;#39;, `reason` varchar(64) NOT NULL DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;event reason&amp;#39;, `message` text NOT NULL COMMENT &amp;#39;event message&amp;#39;, `kind` varchar(64) NOT NULL DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;event kind&amp;#39;, `first_occurrence_time` varchar(64) NOT NULL DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;event first occurrence time&amp;#39;, `last_occurrence_time` varchar(64) NOT NULL DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;event last occurrence time&amp;#39;, `cluster` varchar(64) DEFAULT NULL COMMENT &amp;#39;cluster&amp;#39;, `source` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT &amp;#39;source&amp;#39;, PRIMARY KEY (`id`), UNIQUE KEY `event_id_index` (`event_id`) ) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8 COMMENT=&amp;#39;Event info tables&amp;#39;; 执行yaml apiVersion: apps/v1 kind: Deployment metadata: labels: name: kube-eventer name: kube-eventer namespace: kube-system spec: replicas: 1 selector: matchLabels: app: kube-eventer template: metadata: labels: app: kube-eventer annotations:	scheduler.</description>
    </item>
    
    <item>
      <title>Kubernetes概念入门</title>
      <link>https://leejay.top/post/kubernetes%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/</link>
      <pubDate>Fri, 09 Apr 2021 11:07:57 +0800</pubDate>
      
      <guid>https://leejay.top/post/kubernetes%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/</guid>
      <description>容器与虚拟机的区别 虚拟机（VM）是虚拟化底层计算机，每个VM不仅需要运行操作系统的完整副本，还需要运行操作系统需要运行的所有硬件的虚拟副本。这就意味着需要大量的硬件资源。
相比VM，容器只需要虚拟化操作系统。每个容器共享主机操作系统内核。相比VM功能类似，但是开销少很多。但是VM提供了完全隔离的环境。
容器内的进程是运行在宿主机的操作系统上的，而虚拟机内的进程是运行在不同的操作系统上的，但容器内的进程是与其他进程隔离的。、
VM内的指令执行流程：VM程序指令 -&amp;gt; VM操作系统内核 -&amp;gt; 宿主机管理程序 -&amp;gt; 宿主机内核。 容器会完全指定运行在宿主机上的同一个内核的系统调用，容器间是共享操作系统内核。 容器的隔离机制实现 Linux命名空间 每个进程只能看到自己的系统视图（文件、进程、网络接口、主机名等）。进程不单单只属于一个命名空间，而是属于每个类型的一个命名空间。类型包括Mount(mnt)、Process ID(pid)、NetWork(net)、Inter-process communication(ipd)、UTS、User ID(user)。
Linux控制组 基于cgroups实现，它是Linux内核功能，限制一个进程或一组进程的资源使用不超过被分配的量。
Kubernetes基本概念 Kubernetes Master &amp;amp; Node Kubernetes运行流程 在应用程序运行时，可以增加或减少副本数量。也可以交由kubernetes进行判断。 kubernetes可能需要在集群中迁移你的容器，比如运行的节点失败时、为其他容器腾空间从节点移除时。 Docker Command # 运行容器并输出hello world docker run busybox echo hello world Dockerfile const http = require(&amp;#39;http&amp;#39;); const os = require(&amp;#39;os&amp;#39;); console .log (&amp;#34;Kub i a server starting ... &amp;#34;); var handler = function(request, response){ console.log (&amp;#34;Rece i ved request from ” + request connection.</description>
    </item>
    
  </channel>
</rss>
