<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reference on Keep Improving</title>
    <link>https://leejay.top/tags/reference/</link>
    <description>Recent content in reference on Keep Improving</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>苏ICP备18050258号</copyright>
    <lastBuildDate>Fri, 14 Aug 2020 16:33:06 +0800</lastBuildDate><atom:link href="https://leejay.top/tags/reference/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HotSpot垃圾回收算法</title>
      <link>https://leejay.top/post/hotspot%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 14 Aug 2020 16:33:06 +0800</pubDate>
      
      <guid>https://leejay.top/post/hotspot%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</guid>
      <description>垃圾回收概述 在JVM运行期间，会对内存中不再被使用的对象进行分配和管理。若不及时对内存中的垃圾进行清理，会导致被保留的空间无法被其他对象使用，从而导致内存溢出。
 内存溢出：系统无法分配给程序所需要的指定大小内存。
内存泄漏：当对象不再使用或无法继续使用时，因为强引用的存在导致本该会回收的内存无法被回收，常见于：Map用对象作为key不重写hashcode &amp;amp; equals &amp;amp; ThreadLocal内存泄漏。
 对象是否存活 JVM垃圾回收器会对对象中不再使用(死去)的对象进行回收，那么垃圾回收器是如何进行判断的呢。
1. 引用计数法 对于一个对象A，只要有一个对象引用了A，那么A的计数器增加1，当引用失效的时候就减1。该算法会产生对象之间循环引用问题，会导致内存泄漏。
2. 可达性算法 通过一系列称为&amp;quot;GC Roots&amp;quot;的根对象作为起点，根据引用关系向下搜索，搜索过程走过的路称为&amp;quot;引用链&amp;quot;。如果某个对象到&amp;quot;GC Roots&amp;quot;没有任何引用链相连，就说明该对象需要被回收。
 图中绿色为可达对象，灰色为不可达对象。
GC Roots包括但不限于以下：
 栈帧中引用的对象（局部变量、临时变量等） 类中的引用型静态变量 字符串常量池中的引用。 被Synchronized锁持有的对象。   3.并发的可达性 我们知道大部分的收集器都是使用可达性算法判断标记对象是否要被回收，其中又被分为中断用户线程、与用户线程并发执行两种。
中断用户线程进行标记时，对象图中的对象或引用不会被修改，但堆中存储的对象越多，带来的STW时间也会越长。因此为了减少STW时长，标记与用户线程同时运行能有效减少STW时长，但会带来并发可达性问题：
 被标记完毕的对象又新引用了未被收集器访问的对象。 正在被标记的对象直接或间接删除了未被收集器访问的对象的引用。  基于上述两个问题产生了两种解决方案：
 增量更新  基于问题1，当被标记完毕对象又引用了未被收集器访问的对象时，将这些被标记完毕对象记录下来，等并发标记阶段结束后，以这些被标记完毕对象为根再次进行扫描。CMS收集器采用此策略实现并发标记。
原始快照  基于问题2，当正在被标记的对象直接或间接删除了未被收集器访问的对象的引用时，将这些正在被标记的对象记录下来，等并发标记结束后，以这些正在被标记的对象为根重新扫描。G1收集器采用此策略实现并发标记。
 Java中的引用 传统的引用概念：若reference类型的数据中存储的数值是另一块内存的起始地址，就说明该reference数据是某个内存、某个对象的引用。
从JDK1.2开始，Java对引用的概念进行补充，将引用分为了：强引用、软引用、弱引用和虚引用四种。
public abstract class Reference&amp;lt;T&amp;gt; { // 引用本身 	private T referent; // 存储reference本身的链表队列  volatile ReferenceQueue&amp;lt;? super T&amp;gt; queue; }  当垃圾回收器准备回收一个对象时，发现它还有软、弱、虚引用，就会在回收对象之前，将该引用加入到与之关联的引用队列ReferenceQueue中去，这样就可以实现在引用对象回收前的相关操作。</description>
    </item>
    
  </channel>
</rss>
