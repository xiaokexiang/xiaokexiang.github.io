<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Collectors on Keep Improving</title>
    <link>https://leejay.top/tags/collectors/</link>
    <description>Recent content in Collectors on Keep Improving</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>苏ICP备18050258号</copyright>
    <lastBuildDate>Fri, 28 Aug 2020 16:36:54 +0800</lastBuildDate><atom:link href="https://leejay.top/tags/collectors/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HotSpot垃圾收集器</title>
      <link>https://leejay.top/post/hotspot%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</link>
      <pubDate>Thu, 20 Aug 2020 16:34:32 +0800</pubDate>
      
      <guid>https://leejay.top/post/hotspot%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</guid>
      <description>JVM中经典的垃圾回收器 下图是来自oracle官方博客中介绍垃圾回收器之间的关系图。
 黄色代表新生代，灰色代表老年代，两个垃圾回收器之间相连表示这两个垃圾回收器组合使用。
Serial &amp;amp; CMS 与 ParNew &amp;amp; Serial Old两组 在JDK8中已过期，JDK9中已移除。
我们用并行、并发来形容不同的收集器：
并行：描述的是多条垃圾回收器线程之间的关系，默认此时的用户线程处于等待状态。
并发：描述垃圾回收器线程与用户线程间的关系，说明同一时间垃圾回收器线程与用户线程都在运行。
  新生代收集器 以下三种收集器都采用的是标记-复制算法来实现收集器的回收逻辑。
Serial收集器 使用单线程工作的收集器，除了只会用一个处理器或一个收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集时，必须暂停其他所有的工作线程(STW)，直到收集结束。是客户端模式下默认新生代收集器。
 客户端/服务端区别：client比server模式启动速度更快，当server比client模式运行速度更快。
 相比其他垃圾收集器，Serial收集器时所有垃圾回收器里面额外内存消耗最小的，但STW耗时是最长的；对于单核处理器或处理器核心较少环境来说，由于没有线程交互的开销，Serial收集器可以获得最高的单线程收集效率。
-XX:+UseSerialGC 新生代 &amp;amp; 老年代都使用串行收集器 ParNew收集器 ParNew收集器本质上是Serial收集器的多线程并行版本。除了同时使用多条线程进行垃圾收集外，其余的和Serial收集器一致。
 这里的并行指的是：同一个时间有多个这样的收集线程在协调工作，用户线程此时处于等待状态。
 除了Serial收集器外，只有ParNew收集器能与CMS收集器配合工作。
# 新生代ParNew &amp;amp; 老年代CMS 是开启CMS下新生代默认收集器 -XX:+UseConcMarkSweepGC # 新生代ParNew &amp;amp; 老年代SerialOld（JDK8后已过期） -XX:+UseParNewGC 因为线程交互的开销，在单核处理器下性能低于Serial，但是多核心下ParNew收集器还是很高效的。
# 垃圾收集的线程数为8 -XX:ParallelGCThreads=8  不设置此参数时，当Cpu Cores &amp;lt; 8时，Threads=Cpu Cores，否则 Threads=3+(5*cores)/8）。
 Parallel Scavenge收集器 相比ParNew收集器目标是减少用户线程的停顿时间，Paraller收集器关注则是可控制的吞吐量。 $$ 吞吐量 = 运行用户代码时间 / (运行用户代码时间 + 运行垃圾收集时间） $$</description>
    </item>
    
    <item>
      <title>HotSpot参数汇总</title>
      <link>https://leejay.top/post/hotspot%E5%8F%82%E6%95%B0%E6%B1%87%E6%80%BB/</link>
      <pubDate>Fri, 28 Aug 2020 16:36:54 +0800</pubDate>
      
      <guid>https://leejay.top/post/hotspot%E5%8F%82%E6%95%B0%E6%B1%87%E6%80%BB/</guid>
      <description>基本参数    参数 作用     -XX:+PrintGCDetails 打印详细的GC日志   -XX:+PrintGCTimeStamps GC开头的时间为虚拟机启动时间的偏移量   -XX:+PrintGCApplicationStoppedTime 打印引用程序由于GC而产生停顿的时间   -Xloggc:D://log.txt 输出GC日志到D盘下log.txt文件中   -XX:+PrintVMOptions 打印显示传递的参数   -XX:+PrintCommandLineFlags 打印传递给虚拟机的显式和隐式参数   -XX:+PrintFlagsFinal 打印全部参数(包括虚拟机自身的参数)   -Xss1m 指定栈大小为1m   -Xms10m 初始堆空间大小   -Xmx20m 最大堆空间大小   -Xmn2m 新生代大小   -XX:SurvivorRatio 新生代中eden/s0/s1比例，默认8:1:1   -XX:NewRatio 老年代/新生代的比例，默认2:1   -XX:NewSize 新生代初始大小   -XX:MaxNewSize 新生代大小最大值   -XX:+HeapDumpOnOutOfMemoryError 堆OOM时导出堆的信息   -XX:HeapDumpPath=D://log.</description>
    </item>
    
  </channel>
</rss>
