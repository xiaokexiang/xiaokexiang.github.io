<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on Keep Improving</title>
    <link>https://leejay.top/categories/spring/</link>
    <description>Recent content in Spring on Keep Improving</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>苏ICP备18050258号-1</copyright>
    <lastBuildDate>Wed, 12 May 2021 16:18:28 +0800</lastBuildDate><atom:link href="https://leejay.top/categories/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于EnableAspectJAutoProxy注解引出的若干问题</title>
      <link>https://leejay.top/post/enable_aspectj_auto_proxy/</link>
      <pubDate>Wed, 12 May 2021 16:18:28 +0800</pubDate>
      
      <guid>https://leejay.top/post/enable_aspectj_auto_proxy/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;最近在阅读Spring AOP的源码(基于Spring 5.2.8.RELEASE)中，发现&lt;code&gt;@EnableAspectJAutoProxy&lt;/code&gt;注解中的&lt;code&gt;proxyTargetClass&lt;/code&gt;参数并不如注释（&lt;code&gt;是否创建基于子类的CGLIB代理&lt;/code&gt;）中说所的哪样生效。无论我设置成true/false都会使用CGLIB代理。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>SpringMVC使用注意</title>
      <link>https://leejay.top/post/spring_mvc/</link>
      <pubDate>Tue, 10 Nov 2020 11:04:59 +0800</pubDate>
      
      <guid>https://leejay.top/post/spring_mvc/</guid>
      <description>SpringMVC相关问题 拦截器中@value注解不生效 原因在于：当我们继承WebMvcConfigurationSupport中的addInterceptors方法，并添加自定义的拦截器时，如果我们使用new的方式创建，那么该拦截器不会被IOC容器管理，所以无法给通过@value注解注入配置，推荐@Bean注解注入。
public class LoginInterceptor implements HandlerInterceptor { private final Logger log = LoggerFactory.getLogger(this.getClass()); @Override public boolean preHandle( HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { log.info(&amp;#34;request is coming in ...&amp;#34;); return false; } } public class SpringCloudEurekaServerApplication implements WebMvcConfigurer { @Bean public LoginInterceptor loginInterceptor() { return new LoginInterceptor(); } @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(loginInterceptor()).addPathPatterns(&amp;#34;/**&amp;#34;); } } WebMvcConfigurer 和 WebMvcConfigurationSupport 存在WebMvcConfigurationSupport则WebMvcConfigurer不生效 @ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class }) @ConditionalOnMissingBean(WebMvcConfigurationSupport.</description>
    </item>
    
  </channel>
</rss>
