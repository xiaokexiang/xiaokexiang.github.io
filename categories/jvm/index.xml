<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JVM on Keep Improving</title>
    <link>https://leejay.top/categories/jvm/</link>
    <description>Recent content in JVM on Keep Improving</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>苏ICP备18050258号</copyright>
    <lastBuildDate>Wed, 09 Sep 2020 17:51:05 +0800</lastBuildDate><atom:link href="https://leejay.top/categories/jvm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jvm类加载机制</title>
      <link>https://leejay.top/post/jvm%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 09 Sep 2020 17:51:05 +0800</pubDate>
      
      <guid>https://leejay.top/post/jvm%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</guid>
      <description>Java虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型。
 1.类加载时机 类加载的生命周期  类型被加载到虚拟机内存中开始，到卸载出内存为止，整个生命周期经历如上七个阶段。
其中验证、准备、解析统称为连接。
需要注意的是：解析阶段顺序是不确定的，它可以在初始化阶段之后再开始。
 类初始化的六种情况 **《Java虚拟机规范》**中规定了六种要立即对类进行”初始化“(加载、验证、准备自然需要在此之前执行)的情况：
  遇到new、getstatic、putstatic、invokestatic这四条字节码指令时，类型没有过初始化，生成这四条字节码指令的场景有：
 使用new关键字实例化对象。  // 会初始化A A a = new A();  读取或设置一个类型的静态字段(final修饰、编译器进入常量池的静态字段除外)。  class B { // 会导致A类被初始化  static A a = new A(); public static void main(String[] args) { // 不会导致A类被初始化  System.out.print(A.HELLO_WORLD); } } class A { static final String HELLO_WORLD = &amp;#34;hello_world&amp;#34;; }  引用静态字符串常量不会导致持有该常量的类初始化。
  调用一个类型的静态方法  class A { static void print() { System.</description>
    </item>
    
    <item>
      <title>HotSpot垃圾回收算法</title>
      <link>https://leejay.top/post/hotspot%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 14 Aug 2020 16:33:06 +0800</pubDate>
      
      <guid>https://leejay.top/post/hotspot%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</guid>
      <description>垃圾回收概述 在JVM运行期间，会对内存中不再被使用的对象进行分配和管理。若不及时对内存中的垃圾进行清理，会导致被保留的空间无法被其他对象使用，从而导致内存溢出。
 内存溢出：系统无法分配给程序所需要的指定大小内存。
内存泄漏：当对象不再使用或无法继续使用时，因为强引用的存在导致本该会回收的内存无法被回收，常见于：Map用对象作为key不重写hashcode &amp;amp; equals &amp;amp; ThreadLocal内存泄漏。
 对象是否存活 JVM垃圾回收器会对对象中不再使用(死去)的对象进行回收，那么垃圾回收器是如何进行判断的呢。
1. 引用计数法 对于一个对象A，只要有一个对象引用了A，那么A的计数器增加1，当引用失效的时候就减1。该算法会产生对象之间循环引用问题，会导致内存泄漏。
2. 可达性算法 通过一系列称为&amp;quot;GC Roots&amp;quot;的根对象作为起点，根据引用关系向下搜索，搜索过程走过的路称为&amp;quot;引用链&amp;quot;。如果某个对象到&amp;quot;GC Roots&amp;quot;没有任何引用链相连，就说明该对象需要被回收。
 图中绿色为可达对象，灰色为不可达对象。
GC Roots包括但不限于以下：
 栈帧中引用的对象（局部变量、临时变量等） 类中的引用型静态变量 字符串常量池中的引用。 被Synchronized锁持有的对象。   3.并发的可达性 我们知道大部分的收集器都是使用可达性算法判断标记对象是否要被回收，其中又被分为中断用户线程、与用户线程并发执行两种。
中断用户线程进行标记时，对象图中的对象或引用不会被修改，但堆中存储的对象越多，带来的STW时间也会越长。因此为了减少STW时长，标记与用户线程同时运行能有效减少STW时长，但会带来并发可达性问题：
 被标记完毕的对象又新引用了未被收集器访问的对象。 正在被标记的对象直接或间接删除了未被收集器访问的对象的引用。  基于上述两个问题产生了两种解决方案：
 增量更新  基于问题1，当被标记完毕对象又引用了未被收集器访问的对象时，将这些被标记完毕对象记录下来，等并发标记阶段结束后，以这些被标记完毕对象为根再次进行扫描。CMS收集器采用此策略实现并发标记。
原始快照  基于问题2，当正在被标记的对象直接或间接删除了未被收集器访问的对象的引用时，将这些正在被标记的对象记录下来，等并发标记结束后，以这些正在被标记的对象为根重新扫描。G1收集器采用此策略实现并发标记。
 Java中的引用 传统的引用概念：若reference类型的数据中存储的数值是另一块内存的起始地址，就说明该reference数据是某个内存、某个对象的引用。
从JDK1.2开始，Java对引用的概念进行补充，将引用分为了：强引用、软引用、弱引用和虚引用四种。
public abstract class Reference&amp;lt;T&amp;gt; { // 引用本身 	private T referent; // 存储reference本身的链表队列  volatile ReferenceQueue&amp;lt;? super T&amp;gt; queue; }  当垃圾回收器准备回收一个对象时，发现它还有软、弱、虚引用，就会在回收对象之前，将该引用加入到与之关联的引用队列ReferenceQueue中去，这样就可以实现在引用对象回收前的相关操作。</description>
    </item>
    
    <item>
      <title>HotSpot垃圾收集器</title>
      <link>https://leejay.top/post/hotspot%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</link>
      <pubDate>Thu, 20 Aug 2020 16:34:32 +0800</pubDate>
      
      <guid>https://leejay.top/post/hotspot%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</guid>
      <description>JVM中经典的垃圾回收器 下图是来自oracle官方博客中介绍垃圾回收器之间的关系图。
 黄色代表新生代，灰色代表老年代，两个垃圾回收器之间相连表示这两个垃圾回收器组合使用。
Serial &amp;amp; CMS 与 ParNew &amp;amp; Serial Old两组 在JDK8中已过期，JDK9中已移除。
我们用并行、并发来形容不同的收集器：
并行：描述的是多条垃圾回收器线程之间的关系，默认此时的用户线程处于等待状态。
并发：描述垃圾回收器线程与用户线程间的关系，说明同一时间垃圾回收器线程与用户线程都在运行。
  新生代收集器 以下三种收集器都采用的是标记-复制算法来实现收集器的回收逻辑。
Serial收集器 使用单线程工作的收集器，除了只会用一个处理器或一个收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集时，必须暂停其他所有的工作线程(STW)，直到收集结束。是客户端模式下默认新生代收集器。
 客户端/服务端区别：client比server模式启动速度更快，当server比client模式运行速度更快。
 相比其他垃圾收集器，Serial收集器时所有垃圾回收器里面额外内存消耗最小的，但STW耗时是最长的；对于单核处理器或处理器核心较少环境来说，由于没有线程交互的开销，Serial收集器可以获得最高的单线程收集效率。
-XX:+UseSerialGC 新生代 &amp;amp; 老年代都使用串行收集器 ParNew收集器 ParNew收集器本质上是Serial收集器的多线程并行版本。除了同时使用多条线程进行垃圾收集外，其余的和Serial收集器一致。
 这里的并行指的是：同一个时间有多个这样的收集线程在协调工作，用户线程此时处于等待状态。
 除了Serial收集器外，只有ParNew收集器能与CMS收集器配合工作。
# 新生代ParNew &amp;amp; 老年代CMS 是开启CMS下新生代默认收集器 -XX:+UseConcMarkSweepGC # 新生代ParNew &amp;amp; 老年代SerialOld（JDK8后已过期） -XX:+UseParNewGC 因为线程交互的开销，在单核处理器下性能低于Serial，但是多核心下ParNew收集器还是很高效的。
# 垃圾收集的线程数为8 -XX:ParallelGCThreads=8  不设置此参数时，当Cpu Cores &amp;lt; 8时，Threads=Cpu Cores，否则 Threads=3+(5*cores)/8）。
 Parallel Scavenge收集器 相比ParNew收集器目标是减少用户线程的停顿时间，Paraller收集器关注则是可控制的吞吐量。 $$ 吞吐量 = 运行用户代码时间 / (运行用户代码时间 + 运行垃圾收集时间） $$</description>
    </item>
    
    <item>
      <title>HotSpot参数汇总</title>
      <link>https://leejay.top/post/hotspot%E5%8F%82%E6%95%B0%E6%B1%87%E6%80%BB/</link>
      <pubDate>Fri, 28 Aug 2020 16:36:54 +0800</pubDate>
      
      <guid>https://leejay.top/post/hotspot%E5%8F%82%E6%95%B0%E6%B1%87%E6%80%BB/</guid>
      <description>基本参数    参数 作用     -XX:+PrintGCDetails 打印详细的GC日志   -XX:+PrintGCTimeStamps GC开头的时间为虚拟机启动时间的偏移量   -XX:+PrintGCApplicationStoppedTime 打印引用程序由于GC而产生停顿的时间   -Xloggc:D://log.txt 输出GC日志到D盘下log.txt文件中   -XX:+PrintVMOptions 打印显示传递的参数   -XX:+PrintCommandLineFlags 打印传递给虚拟机的显式和隐式参数   -XX:+PrintFlagsFinal 打印全部参数(包括虚拟机自身的参数)   -Xss1m 指定栈大小为1m   -Xms10m 初始堆空间大小   -Xmx20m 最大堆空间大小   -Xmn2m 新生代大小   -XX:SurvivorRatio 新生代中eden/s0/s1比例，默认8:1:1   -XX:NewRatio 老年代/新生代的比例，默认2:1   -XX:NewSize 新生代初始大小   -XX:MaxNewSize 新生代大小最大值   -XX:+HeapDumpOnOutOfMemoryError 堆OOM时导出堆的信息   -XX:HeapDumpPath=D://log.</description>
    </item>
    
    <item>
      <title>JVM内存区域概述</title>
      <link>https://leejay.top/post/jvm%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Thu, 13 Aug 2020 13:21:20 +0800</pubDate>
      
      <guid>https://leejay.top/post/jvm%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E6%A6%82%E8%BF%B0/</guid>
      <description>JVM内存区域概述 虚拟机栈 虚拟机栈描述的是Java方法执行的线程内存模型:每个方法被执行时，JVM会同步创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息，虚拟机栈区域是线程私有的，它的生命周期与线程相同。
 局部变量表：存放编译期可知的数据类型：8种基本数据类型和对象引用类型。这些数据类型在栈中用slot来表示，除了long &amp;amp; double占用2个slot，其余的都为1个。
虚拟机栈包含用于执行native方法的本地方法栈。它们都会抛出OOM和StackOverFlow异常。
 虚拟机堆 这是一块线程共享的内存区域，几乎全部的对象实例、数组都在堆上分配（小对象可以在栈上分配）。
 从内存回收角度看， 堆被逻辑的分为：年轻代（包括eden、from、to三个区域）、老年代。
从内存分配角度看，堆被分为多个线程私有的内存分配缓冲区（TLAB）。
 TLAB Thread Local Allocation Buffer（本地线程缓冲区），原有的虚拟机给对象分配内存时，采用是CAS + 失败重试的方式。而TLAB是：
 通预先给每个线程在堆中分配一小块区域。 哪个线程创建对象，就在哪个线程的TLAB中分配内存。 如果这个线程的TLAB空间不够分配时，就通过同步锁定给这个线程分配新的TLAB。 -XX:+/-UseTLAB来开启和关闭TLAB。  元数据区 JDK1.8起，方法区改名为元数据区（MetaSpace），是线程共享的区域，是堆的一个逻辑部分，用于存储JVM加载的类型信息、常量、静态变量及即时编译后的方法代码等数据。会抛出OOM异常。
常量池分类  Class文件中的常量池  主要存放字面量 &amp;amp; 符号引用。前者主要是文本字符串、八种基本数据类型、final修饰的常量等，后者包含：类和接口的全限定名、字段的名称和描述符、方法的名称和描述符。在类被加载后会存放到运行时常量池中。
 运行时常量池  属于元数据区中的一部分，类在被JVM加载后，类的版本、字段、方法和常量池等都会进入该区域。JVM会为每个加载的class维护一个运行时常量池，同时其中存储的是引用，实际对象还在堆中。日常我们所称的常量池就是运行时常量池。
 全局字符串常量池  JDK7后位于堆中，运行时存在的用于记录interned string的全局表StringTabel。其中存放的是String实例的引用，实际的String对象仍存在于堆。
 String.intern()：如果字符串常量池已存在该字符串引用，那么就返回已存在的字符串的引用。若没有就将引用保存到字符串常量池并返回引用。
 字符常量的执行流程   首先编译期会将字面量、符号引用等放入Class文件的常量池中。
  在JVM类加载的过程中，除了字面量，类的字段、方法等信息都会加载到当前类运行时常量池。此时运行时常量池中存放的是CONSTANT-UnresolvedString，表明尚未resolve，只有在解析后存放的是CONSTANT_String，内容是实际的String对象的引用，和字符串常量池的引用一致。
  因为JVM类加载过程中的解析(resolve)阶段是可以懒执行的，只有当执行ldc指令时，通过存放在运行时常量池的索引去字符串常量池查找是否存在对应的String实例，如果存在就直接返回该引用，不存在就先在堆中创建对应的String对象，并将引用记录在字符串常量池中，再返回该引用。
 ldc指令：将int、float或String类型的常量值从常量池推送至栈顶。
资料来源：https://www.zhihu.com/question/55994121/answer/408891707
    程序计数器 当前线程所执行的字节码的行号指示器。分支、循环、异常处理都是依赖计数器实现，该区域是线程私有的。
直接内存 直接内存并不是JVM运行时数据区的一部分。常见于NIO类使用：通过Native方法分配堆外内存，在Java堆中持有该内存区域的引用实现操作，相比之前在Java堆和Native堆之间来回复制的方式，提升了效率。</description>
    </item>
    
  </channel>
</rss>
